name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpass
          MYSQL_DATABASE: testdb
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: true
          cache-dependency-path: go.sum

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Run lint checks
        run: make lint

      - name: Run unit tests (individual packages)
        run: |
          echo "ðŸ§ª Running tests by package for better visibility..."
          make test-utils
          make test-models  
          make test-ai
          make test-ui
      
      - name: Run database URL parser tests
        run: |
          echo "ðŸ§ª Running database URL parser tests..."
          # Test URL parser separately (this is stable)
          cd pkg/database && go test -v -race url_parser_test.go url_parser.go
          
      - name: Run comprehensive test coverage
        env:
          POSTGRES_URL: postgres://testuser:testpass@localhost:5432/testdb?sslmode=disable
          MYSQL_URL: mysql://testuser:testpass@localhost:3306/testdb
        run: |
          echo "ðŸ§ª Running full test suite with coverage..."
          # Run coverage on stable packages
          go test -v -race -coverprofile=coverage.out \
            ./internal/utils/... \
            ./internal/models/... \
            ./internal/ai/... \
            ./internal/ui/...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: true
          cache-dependency-path: go.sum

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-benchmark-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-benchmark-
            ${{ runner.os }}-go-

      - name: Run benchmarks
        run: |
          echo "ðŸš€ Running performance benchmarks..."
          make benchmark-utils
          make benchmark-ai
          make benchmark-ui

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, benchmark]
    
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          # Windows on ARM64 is less common for development
          - goos: windows
            goarch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: true
          cache-dependency-path: go.sum

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-build-${{ matrix.goos }}-${{ matrix.goarch }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-build-${{ matrix.goos }}-${{ matrix.goarch }}-
            ${{ runner.os }}-go-build-
            ${{ runner.os }}-go-

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p dist
          binary_name="dbsage"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            binary_name="${binary_name}.exe"
          fi
          
          go build -ldflags="-w -s" \
                   -o "dist/${binary_name}" \
                   ./cmd/dbsage/main.go
          
          echo "Built binary for ${{ matrix.goos }}/${{ matrix.goarch }}"
          ls -la dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dbsage-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/


